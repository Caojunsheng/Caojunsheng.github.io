<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>chan on Chenruohan个人博客</title>
    <link>https://caojunsheng.github.io/tags/chan/</link>
    <description>Recent content in chan on Chenruohan个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Sep 2021 17:11:28 +0800</lastBuildDate><atom:link href="https://caojunsheng.github.io/tags/chan/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>golang chan close源码分析</title>
      <link>https://caojunsheng.github.io/posts/golang/05_chan_close/</link>
      <pubDate>Fri, 17 Sep 2021 17:11:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/golang/05_chan_close/</guid>
      <description>4、chan关闭流程 参考https://www.bookstack.cn/read/qcrao-Go</description>
    </item>
    
    <item>
      <title>golang chan recv源码分析</title>
      <link>https://caojunsheng.github.io/posts/golang/03_chan_recv/</link>
      <pubDate>Fri, 17 Sep 2021 17:11:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/golang/03_chan_recv/</guid>
      <description>2、chan读取源码分析 chan的读取源码入口是如下两个函数： 1 2 3 4 5 6 7 8 9 // 读取的数据放在el</description>
    </item>
    
    <item>
      <title>golang chan send源码分析</title>
      <link>https://caojunsheng.github.io/posts/golang/04_chan_send/</link>
      <pubDate>Fri, 17 Sep 2021 17:11:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/golang/04_chan_send/</guid>
      <description>3、chan写入源码分析 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38</description>
    </item>
    
    <item>
      <title>golang chan数据结构</title>
      <link>https://caojunsheng.github.io/posts/golang/02_chan_data_structure/</link>
      <pubDate>Fri, 17 Sep 2021 17:11:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/golang/02_chan_data_structure/</guid>
      <description>二、chan源码解读 1、chan数据结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 type</description>
    </item>
    
    <item>
      <title>golang里面几个chan常见的坑</title>
      <link>https://caojunsheng.github.io/posts/golang/01_chan/</link>
      <pubDate>Fri, 17 Sep 2021 17:11:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/golang/01_chan/</guid>
      <description>一、golang里面几个chan常见的坑 1、向chan发送数据 向已关闭的chan发送数据会panic</description>
    </item>
    
  </channel>
</rss>
