<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Chenruohan个人博客</title>
    <link>https://caojunsheng.github.io/posts/</link>
    <description>Recent content in Posts on Chenruohan个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Jun 2024 16:29:28 +0800</lastBuildDate><atom:link href="https://caojunsheng.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>virtio_net设备初始化流程</title>
      <link>https://caojunsheng.github.io/posts/linux/virtio/</link>
      <pubDate>Tue, 18 Jun 2024 16:29:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/linux/virtio/</guid>
      <description>worker_thread &amp;ndash;&amp;gt; process_one_work &amp;ndash;&amp;gt; pciehp_power_thread &amp;ndash;&amp;gt; pciehp_ctrl.c pciehp_enable_slot &amp;ndash;&amp;gt; board_added &amp;ndash;&amp;gt; pciehp_pci.c pciehp_configure_device &amp;ndash;&amp;gt; pci/bus.c pci_bus_add_devices &amp;ndash;&amp;gt; pci_bus_add_device &amp;ndash;&amp;gt; dd.c device_attach &amp;ndash;&amp;gt; __device_attach &amp;ndash;&amp;gt; bus_for_each_drv &amp;ndash;&amp;gt; __device_attach_driver &amp;ndash;&amp;gt; driver_probe_device &amp;ndash;&amp;gt; really_probe &amp;ndash;&amp;gt;call_driver_probe &amp;ndash;&amp;gt; pci-driver.c pci_device_probe &amp;ndash;&amp;gt; pci_call_probe &amp;ndash;&amp;gt; local_pci_probe &amp;ndash;&amp;gt; virtio_pci_common.c virtio_pci_probe &amp;ndash;&amp;gt; virtio.c register_virtio_device &amp;ndash;&amp;gt; core.c device_add &amp;ndash;&amp;gt; base/bus.c</description>
    </item>
    
    <item>
      <title>vfio-mdev使用</title>
      <link>https://caojunsheng.github.io/posts/linux/vfio-mdev/</link>
      <pubDate>Tue, 18 Jun 2024 16:20:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/linux/vfio-mdev/</guid>
      <description>使用vfio-mdev modprobe vfio_pci cd /usr/src/linux-5.10.0-60.18.0.50.x86_64/ make modules make M=usr/src/linux-5.10.0-60.18.0.50.x86_64/drivers/vfio/ -C /usr/src/linux-5.10.0-60.18.0.50.x86_64 -j10 CONFIG_VFIO_MDEV=m insmod mdev.ko insmod vfio_mdev.ko make M=/home/cjs/usr/src/linux-5.10.0-60.18.0.50.x86_64/samples/vfio-mdev/ -C /home/cjs/usr/src/linux-5.10.0-60.18.0.50.x86_64 -j10 CONFIG_SAMPLE_VFIO_MDEV_MTTY=m echo &amp;quot;83b8f4f2-509f-382f-3c1e-e6bfe0fa1001&amp;quot; &amp;gt; /sys/devices/virtual/mtty/mtty/mdev_supported_types/mtty-2/create qemu-kvm -machine q35,accel=kvm -cpu host -smp 8 -m 16G -drive if=none,id=root,file=./centos7.2_cn.qcow2_par -device virtio-blk-pci,drive=root,disable-legacy=on</description>
    </item>
    
    <item>
      <title>Virtio PCI设备配置空间详解</title>
      <link>https://caojunsheng.github.io/posts/linux/virtio_blk%E8%AE%BE%E5%A4%87%E9%85%8D%E7%BD%AE%E7%A9%BA%E9%97%B4/</link>
      <pubDate>Wed, 29 May 2024 15:59:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/linux/virtio_blk%E8%AE%BE%E5%A4%87%E9%85%8D%E7%BD%AE%E7%A9%BA%E9%97%B4/</guid>
      <description>以virtio_blk设备的配置空间为例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30</description>
    </item>
    
    <item>
      <title>PCIe aer-inject注入AER错误</title>
      <link>https://caojunsheng.github.io/posts/linux/aer-inject/</link>
      <pubDate>Wed, 15 May 2024 15:59:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/linux/aer-inject/</guid>
      <description>对AER注入错误需要内核模块支持注入，需要安装aer_inject.ko模块，以及需要工具aer-i</description>
    </item>
    
    <item>
      <title>libvirt 生成代码</title>
      <link>https://caojunsheng.github.io/posts/virtual/libvirt%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Thu, 09 May 2024 17:59:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/virtual/libvirt%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/</guid>
      <description>背景：当我们需要修改xxx_protocol.x文件新增请求参数或者返回值参数时，又或者是需要修改自</description>
    </item>
    
    <item>
      <title>gdb常用命令</title>
      <link>https://caojunsheng.github.io/posts/linux/gdb/</link>
      <pubDate>Thu, 09 May 2024 17:15:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/linux/gdb/</guid>
      <description>相关命令： r（run）：运行 q（quit）：退出 b（break）：打断点 • b function_name • b row_num • b file_name:row_num • b row_num if condition</description>
    </item>
    
    <item>
      <title>rpm常用命令</title>
      <link>https://caojunsheng.github.io/posts/linux/rpm/</link>
      <pubDate>Thu, 09 May 2024 17:05:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/linux/rpm/</guid>
      <description>1.安装一个包 1 # rpm -ivh &amp;lt; rpm package name&amp;gt; 2.安装参数 &amp;ndash;force 即使覆盖属于其它包的文件也强迫安装 &amp;ndash;nodeps 如果该RPM包的安装</description>
    </item>
    
    <item>
      <title>常用命令</title>
      <link>https://caojunsheng.github.io/posts/linux/common-cmd/</link>
      <pubDate>Wed, 08 May 2024 17:05:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/linux/common-cmd/</guid>
      <description>1、rpm文件解压命令 1 rpm2cpio filename | cpio -div 2、yum一次性删除多个rpm包 yum list --installed|grep xxx|awk &#39;{print $1}&#39;|xargs yum remove -y 3、批量解压当前</description>
    </item>
    
    <item>
      <title>qemu QOM代码</title>
      <link>https://caojunsheng.github.io/posts/virtual/qemu-qom/</link>
      <pubDate>Wed, 08 May 2024 16:59:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/virtual/qemu-qom/</guid>
      <description>QEMU提供了一套面向对象编程的模型——QOM，即QEMU Object Model，几乎所有的设备如CPU、内存</description>
    </item>
    
    <item>
      <title>PCIe AER寄存器值查看和修改</title>
      <link>https://caojunsheng.github.io/posts/linux/pcie-aer/</link>
      <pubDate>Wed, 08 May 2024 15:59:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/linux/pcie-aer/</guid>
      <description>1、AER简介 AER 即 Advanced Error Reporting高级错误报告，是PCIe高级特性，用于报告PCIe 错误信息。</description>
    </item>
    
    <item>
      <title>golang内联判断</title>
      <link>https://caojunsheng.github.io/posts/golang/07_goinline/</link>
      <pubDate>Sat, 14 Jan 2023 15:15:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/golang/07_goinline/</guid>
      <description>一、什么是函数内联 内联优化是什么？ 内联(inlining)是编程语言编译器常用的优化手段，其优化的对</description>
    </item>
    
    <item>
      <title>Go面试题及详解</title>
      <link>https://caojunsheng.github.io/posts/golang/06_interview/</link>
      <pubDate>Sat, 08 Oct 2022 11:20:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/golang/06_interview/</guid>
      <description>Go面试题及详解 1. 下面这段代码的输出什么? 1 2 3 4 5 6 func Test1(t *testing.T) { defer func() { fmt.Println(&amp;#34</description>
    </item>
    
    <item>
      <title>stackedit跳转github授权报错400解决</title>
      <link>https://caojunsheng.github.io/posts/fix-stackedit-400/</link>
      <pubDate>Thu, 29 Sep 2022 15:59:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/fix-stackedit-400/</guid>
      <description>stackedit在弹出网页转到github授权界面的时候，弹出来了http400的错误，在你点授权</description>
    </item>
    
    <item>
      <title>First Post</title>
      <link>https://caojunsheng.github.io/posts/first-post/</link>
      <pubDate>Sat, 17 Sep 2022 17:11:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/first-post/</guid>
      <description>This is My First Blog 我告诉你，出来混，有错就要认，挨打要立正。 test</description>
    </item>
    
    <item>
      <title>golang chan close源码分析</title>
      <link>https://caojunsheng.github.io/posts/golang/05_chan_close/</link>
      <pubDate>Fri, 17 Sep 2021 17:11:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/golang/05_chan_close/</guid>
      <description>4、chan关闭流程 参考https://www.bookstack.cn/read/qcrao-Go</description>
    </item>
    
    <item>
      <title>golang chan recv源码分析</title>
      <link>https://caojunsheng.github.io/posts/golang/03_chan_recv/</link>
      <pubDate>Fri, 17 Sep 2021 17:11:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/golang/03_chan_recv/</guid>
      <description>2、chan读取源码分析 chan的读取源码入口是如下两个函数： 1 2 3 4 5 6 7 8 9 // 读取的数据放在el</description>
    </item>
    
    <item>
      <title>golang chan send源码分析</title>
      <link>https://caojunsheng.github.io/posts/golang/04_chan_send/</link>
      <pubDate>Fri, 17 Sep 2021 17:11:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/golang/04_chan_send/</guid>
      <description>3、chan写入源码分析 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38</description>
    </item>
    
    <item>
      <title>golang chan数据结构</title>
      <link>https://caojunsheng.github.io/posts/golang/02_chan_data_structure/</link>
      <pubDate>Fri, 17 Sep 2021 17:11:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/golang/02_chan_data_structure/</guid>
      <description>二、chan源码解读 1、chan数据结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 type</description>
    </item>
    
    <item>
      <title>golang里面几个chan常见的坑</title>
      <link>https://caojunsheng.github.io/posts/golang/01_chan/</link>
      <pubDate>Fri, 17 Sep 2021 17:11:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/golang/01_chan/</guid>
      <description>一、golang里面几个chan常见的坑 1、向chan发送数据 向已关闭的chan发送数据会panic</description>
    </item>
    
  </channel>
</rss>
