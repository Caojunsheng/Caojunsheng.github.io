<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Chenruohan个人博客</title>
    <link>https://caojunsheng.github.io/posts/</link>
    <description>Recent content in Posts on Chenruohan个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 May 2024 15:59:28 +0800</lastBuildDate><atom:link href="https://caojunsheng.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PCIe AER寄存器值查看和修改</title>
      <link>https://caojunsheng.github.io/posts/linux/pcie-aer/</link>
      <pubDate>Wed, 08 May 2024 15:59:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/linux/pcie-aer/</guid>
      <description>1、AER简介 AER 即 Advanced Error Reporting高级错误报告，是PCIe高级特性，用于报告PCIe 错误信息。</description>
    </item>
    
    <item>
      <title>golang内联判断</title>
      <link>https://caojunsheng.github.io/posts/golang/07_goinline/</link>
      <pubDate>Sat, 14 Jan 2023 15:15:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/golang/07_goinline/</guid>
      <description>一、什么是函数内联 内联优化是什么？ 内联(inlining)是编程语言编译器常用的优化手段，其优化的对</description>
    </item>
    
    <item>
      <title>Go面试题及详解</title>
      <link>https://caojunsheng.github.io/posts/golang/06_interview/</link>
      <pubDate>Sat, 08 Oct 2022 11:20:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/golang/06_interview/</guid>
      <description>Go面试题及详解 1. 下面这段代码的输出什么? 1 2 3 4 5 6 func Test1(t *testing.T) { defer func() { fmt.Println(&amp;#34</description>
    </item>
    
    <item>
      <title>stackedit跳转github授权报错400解决</title>
      <link>https://caojunsheng.github.io/posts/fix-stackedit-400/</link>
      <pubDate>Thu, 29 Sep 2022 15:59:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/fix-stackedit-400/</guid>
      <description>stackedit在弹出网页转到github授权界面的时候，弹出来了http400的错误，在你点授权</description>
    </item>
    
    <item>
      <title>First Post</title>
      <link>https://caojunsheng.github.io/posts/first-post/</link>
      <pubDate>Sat, 17 Sep 2022 17:11:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/first-post/</guid>
      <description>This is My First Blog 我告诉你，出来混，有错就要认，挨打要立正。 test</description>
    </item>
    
    <item>
      <title>golang chan close源码分析</title>
      <link>https://caojunsheng.github.io/posts/golang/05_chan_close/</link>
      <pubDate>Fri, 17 Sep 2021 17:11:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/golang/05_chan_close/</guid>
      <description>4、chan关闭流程 参考https://www.bookstack.cn/read/qcrao-Go</description>
    </item>
    
    <item>
      <title>golang chan recv源码分析</title>
      <link>https://caojunsheng.github.io/posts/golang/03_chan_recv/</link>
      <pubDate>Fri, 17 Sep 2021 17:11:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/golang/03_chan_recv/</guid>
      <description>2、chan读取源码分析 chan的读取源码入口是如下两个函数： 1 2 3 4 5 6 7 8 9 // 读取的数据放在el</description>
    </item>
    
    <item>
      <title>golang chan send源码分析</title>
      <link>https://caojunsheng.github.io/posts/golang/04_chan_send/</link>
      <pubDate>Fri, 17 Sep 2021 17:11:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/golang/04_chan_send/</guid>
      <description>3、chan写入源码分析 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38</description>
    </item>
    
    <item>
      <title>golang chan数据结构</title>
      <link>https://caojunsheng.github.io/posts/golang/02_chan_data_structure/</link>
      <pubDate>Fri, 17 Sep 2021 17:11:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/golang/02_chan_data_structure/</guid>
      <description>二、chan源码解读 1、chan数据结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 type</description>
    </item>
    
    <item>
      <title>golang里面几个chan常见的坑</title>
      <link>https://caojunsheng.github.io/posts/golang/01_chan/</link>
      <pubDate>Fri, 17 Sep 2021 17:11:28 +0800</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/golang/01_chan/</guid>
      <description>一、golang里面几个chan常见的坑 1、向chan发送数据 向已关闭的chan发送数据会panic</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caojunsheng.github.io/posts/virtual/qemu-qom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caojunsheng.github.io/posts/virtual/qemu-qom/</guid>
      <description>QEMU提供了一套面向对象编程的模型——QOM，即QEMU Object Model，几乎所有的设备如CPU、内存</description>
    </item>
    
  </channel>
</rss>
